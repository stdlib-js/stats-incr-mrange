{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport NINF from '@stdlib/constants-float64-ninf' ;\nimport Float64Array from '@stdlib/array-float64' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving range.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmrange( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0 );\n* // returns 7.0\n*\n* r = accumulator( 3.0 );\n* // returns 8.0\n*\n* r = accumulator( 5.0 );\n* // returns 10.0\n*\n* r = accumulator();\n* // returns 10.0\n*/\nfunction incrmrange( W ) {\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '0eO8T', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max - min;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\tif ( x === 0.0 ) {\n\t\t\tx = 0.0; // normalizes +-0\n\t\t}\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find a new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\treturn max - min;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmrange;\n"],"names":["incrmrange","W","buf","min","max","N","i","isPositiveInteger","TypeError","format","Float64Array","PINF","NINF","x","v","k","arguments","length","isnan"],"mappings":";;4jBA4DA,SAASA,EAAYC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAmBN,GACxB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAQvC,OANAC,EAAM,IAAIQ,EAAcT,GACxBE,EAAMQ,EACNP,EAAMQ,EACNN,GAAK,EACLD,EAAI,EAWJ,SAAsBQ,GACrB,IAAIC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAW,IAANZ,EACG,KAEDD,EAAMD,EAGdG,GAAKA,EAAE,GAAKL,EAED,IAANY,IACJA,EAAI,GAGL,GAAKK,EAAOL,GACXR,EAAIJ,EACJE,EAAMU,EACNT,EAAMS,OAGF,GAAKR,EAAIJ,EACbI,GAAK,EACAQ,EAAIV,IACRA,EAAMU,GAEFA,EAAIT,IACRA,EAAMS,QAIH,GACFX,EAAKI,KAAQH,GAAOU,EAAIV,GACxBD,EAAKI,KAAQF,GAAOS,EAAIT,GAC1Bc,EAAOhB,EAAKI,KAIZ,IAFAH,EAAMU,EACNT,EAAMS,EACAE,EAAI,EAAGA,EAAId,EAAGc,IACnB,GAAKA,IAAMT,EAAI,CAEd,GADAQ,EAAIZ,EAAKa,GACJG,EAAOJ,GAAM,CACjBX,EAAMW,EACNV,EAAMU,EACN,KACA,CACIA,EAAIX,IACRA,EAAMW,GAEFA,EAAIV,IACRA,EAAMU,EAEP,OAIOD,EAAIV,EACbA,EAAMU,EAGGA,EAAIT,IACbA,EAAMS,GAKP,OAFAX,EAAKI,GAAMO,EAEJT,EAAMD,CACb,CACF"}